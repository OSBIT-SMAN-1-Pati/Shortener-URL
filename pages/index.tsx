import { useFormik,Formik,Form,Field,ErrorMessage} from "formik";
import type { GetServerSideProps, NextPage } from "next";
import Head from "next/head";
import Link from "next/link"
import { useMutation } from "@tanstack/react-query";
import * as yup from "yup"
import { hasCookie,getCookie } from 'cookies-next'
import { prisma } from '@/lib/prisma'
type formData = {
  longUrl : string,
  shortUrl :string
}
export const getServerSideProps = (async({req,res})=>{
  if(hasCookie('sessionUser',{req,res})){  
    const session = getCookie('sessionUser',{req,res}) as unknown as string
    const user = await prisma.user.findFirst({
        where:{
            sessionToken: session
        }
    })
    if(user){
      return { props:{user: JSON.parse(JSON.stringify(user))} }
    } else {
      return {props:{},redirect:{
        permanent:false,
        destination:"/signup"
      }}
    } 
     } else {
    return {props:{},redirect:{
      permanent:false,
      destination:"/signup"
    }}
  }
}) satisfies GetServerSideProps

const Index: NextPage = ({user}:any) => {
  const mutation = useMutation({
    mutationFn: async (newUrl:formData)=>{
      return  fetch('api/hash',{
      method: "POST",
      body: JSON.stringify(newUrl)
    }).then(res=>res.json())
    }
  })
  
  const initialValues = {
    longUrl : "",
    shortUrl:""
  }
  const onSubmit = async (values:formData)=>{
    const {longUrl,shortUrl} = values
    const req = {
      longUrl,
      shortUrl
    }
    mutation.mutate(req) 
  }
  const schema = yup.object().shape({
    longUrl : yup.string().matches(/(www\.)?[-a-zA-Z0-9@:%._\+~#=]{2,256}\.[a-z]{2,6}\b([-a-zA-Z0-9@:%_\+.~#?&//=]*)/,"Invalid").required("Required"),
    shortUrl : yup.string().nullable()
  })
  const formik = useFormik({
      initialValues,
      onSubmit
    }
  )

  return (
    <>
      <Head>
        <title>shortener-url</title>
        <meta name="description" content="Generated by Create Next Stack." />
      </Head>{user ? <h1>{user.name}</h1> :
      <Link href="/login">Login</Link>
      }
      <h1>Welcome to OSBIT Shortener URL</h1>
      <h1>{mutation.isLoading ? "Loading":"" }</h1>
      <p>{mutation.data?.message}</p>
      <Formik initialValues={initialValues} onSubmit={onSubmit} validationSchema={schema}>
        <Form className="flex flex-col w-96">
          <label htmlFor="longUrl">Input</label>
          <Field type="text" id="longUrl" name="longUrl"/>
          <ErrorMessage name="longUrl"/>
          <label htmlFor="shortUrl">shorten</label>
          <Field type="text" id="shortUrl" name="shortUrl"/>
         <button type="submit">Submit</button>
        </Form>
      </Formik>
    </>
  );
};

export default Index;